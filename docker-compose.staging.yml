# Aura Flow Staging 环境 Docker Compose 配置
# 用于测试和预发布验证

version: '3.8'

services:
  # PostgreSQL 数据库 (Staging)
  db:
    image: postgres:15-alpine
    container_name: aura-flow-staging-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${STAGING_POSTGRES_DB:-aura_flow_staging}
      POSTGRES_USER: ${STAGING_POSTGRES_USER:-aura_flow_staging_user}
      POSTGRES_PASSWORD: ${STAGING_POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - staging_postgres_data:/var/lib/postgresql/data
      - ./server/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5433:5432"
    networks:
      - aura-flow-staging-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${STAGING_POSTGRES_USER:-aura_flow_staging_user} -d ${STAGING_POSTGRES_DB:-aura_flow_staging}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # 后端 API 服务 (Staging)
  api:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: aura-flow-staging-api
    restart: unless-stopped
    environment:
      NODE_ENV: staging
      PORT: 3002
      DATABASE_URL: postgresql://${STAGING_POSTGRES_USER:-aura_flow_staging_user}:${STAGING_POSTGRES_PASSWORD}@db:5432/${STAGING_POSTGRES_DB:-aura_flow_staging}
      JWT_SECRET: ${STAGING_JWT_SECRET}
      REFRESH_TOKEN_SECRET: ${STAGING_REFRESH_TOKEN_SECRET}
      CORS_ORIGIN: https://staging.${DOMAIN:-yourdomain.com}
      SENTRY_DSN: ${STAGING_SENTRY_DSN}
      AI_PROVIDER: ${STAGING_AI_PROVIDER:-mock}
      OPENAI_API_KEY: ${STAGING_OPENAI_API_KEY}
      RATE_LIMIT_WINDOW_MS: ${STAGING_RATE_LIMIT_WINDOW_MS:-60000}
      RATE_LIMIT_MAX: ${STAGING_RATE_LIMIT_MAX:-200}
      LOG_LEVEL: ${STAGING_LOG_LEVEL:-debug}
      TRUST_PROXY: "true"
      SECURE_COOKIES: "true"
      SAME_SITE_COOKIES: "strict"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - aura-flow-staging-network
    volumes:
      - ./server/logs:/app/logs
      - ./server/uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx 反向代理 (Staging)
  nginx:
    image: nginx:alpine
    container_name: aura-flow-staging-nginx
    restart: unless-stopped
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./deploy/nginx.staging.conf:/etc/nginx/nginx.conf:ro
      - ./dist:/usr/share/nginx/html:ro
      - staging_nginx_logs:/var/log/nginx
    depends_on:
      - api
    networks:
      - aura-flow-staging-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis 缓存 (Staging)
  redis:
    image: redis:7-alpine
    container_name: aura-flow-staging-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${STAGING_REDIS_PASSWORD}
    volumes:
      - staging_redis_data:/data
    ports:
      - "6380:6379"
    networks:
      - aura-flow-staging-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  staging_postgres_data:
    driver: local
  staging_redis_data:
    driver: local
  staging_nginx_logs:
    driver: local

networks:
  aura-flow-staging-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
