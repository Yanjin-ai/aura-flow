name: Deploy to Staging

on:
  push:
    branches: [ 'release/*' ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # 构建和测试
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Install backend dependencies
      run: |
        cd server
        pnpm install --frozen-lockfile
        
    - name: Run tests
      run: pnpm test
      
    - name: Build frontend
      run: pnpm build
      env:
        VITE_API_BASE_URL: https://api-staging.${{ secrets.DOMAIN }}
        VITE_AI_PROVIDER: mock
        VITE_ENABLE_TELEMETRY: true
        VITE_SENTRY_DSN: ${{ secrets.STAGING_SENTRY_DSN }}
        VITE_BUILD_VERSION: ${{ github.sha }}
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: staging-build
        path: dist/
        retention-days: 7

  # 部署到 Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-test
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: staging-build
        path: dist/
        
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push staging images
      run: |
        # 构建并推送后端镜像
        docker buildx build \
          --platform linux/amd64 \
          --file Dockerfile.backend \
          --tag ${{ secrets.DOCKER_REGISTRY }}/aura-flow-backend:staging-${{ github.sha }} \
          --tag ${{ secrets.DOCKER_REGISTRY }}/aura-flow-backend:staging-latest \
          --push .
          
        # 构建并推送前端镜像
        docker buildx build \
          --platform linux/amd64 \
          --tag ${{ secrets.DOCKER_REGISTRY }}/aura-flow-frontend:staging-${{ github.sha }} \
          --tag ${{ secrets.DOCKER_REGISTRY }}/aura-flow-frontend:staging-latest \
          --push .
          
    - name: Deploy to staging server
      run: |
        # 这里添加实际的部署逻辑
        # 例如：使用 SSH 连接到 staging 服务器，更新 Docker Compose 等
        echo "部署到 Staging 环境..."
        echo "镜像标签: staging-${{ github.sha }}"
        echo "分支: ${{ github.ref_name }}"
        
    - name: Run post-deployment tests
      run: |
        # 部署后测试
        sleep 30  # 等待服务启动
        curl -f https://staging.${{ secrets.DOMAIN }}/health || exit 1
        
    - name: Notify deployment success
      if: success()
      run: |
        echo "✅ Staging 环境部署成功"
        echo "访问地址: https://staging.${{ secrets.DOMAIN }}"
        echo "API 地址: https://api-staging.${{ secrets.DOMAIN }}"
        # 可以添加通知逻辑，如发送 Slack 消息、邮件等
        
    - name: Notify deployment failure
      if: failure()
      run: |
        echo "❌ Staging 环境部署失败"
        # 可以添加失败通知逻辑

  # Staging 环境 E2E 测试
  staging-e2e:
    name: Staging E2E Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Install Playwright browsers
      run: pnpm playwright install --with-deps
      
    - name: Run E2E tests against staging
      run: pnpm playwright test
      env:
        VITE_API_BASE_URL: https://api-staging.${{ secrets.DOMAIN }}
        VITE_AI_PROVIDER: mock
        VITE_ENABLE_TELEMETRY: false
        
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: staging-e2e-results
        path: playwright-report/
        retention-days: 7
