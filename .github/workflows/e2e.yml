name: E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # E2E 测试
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    
    services:
      # PostgreSQL 数据库服务
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: aura_flow_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Install backend dependencies
      run: |
        cd server
        pnpm install --frozen-lockfile
        
    - name: Setup test database
      run: |
        cd server
        pnpm db:generate
        pnpm db:push
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/aura_flow_test
        JWT_SECRET: test-secret-key
        NODE_ENV: test
        
    - name: Start backend server
      run: |
        cd server
        pnpm start &
        sleep 10
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/aura_flow_test
        JWT_SECRET: test-secret-key
        NODE_ENV: test
        PORT: 3001
        
    - name: Build frontend
      run: pnpm build
      env:
        VITE_API_BASE_URL: http://localhost:3001
        VITE_AI_PROVIDER: mock
        VITE_ENABLE_TELEMETRY: false
        VITE_BUILD_VERSION: ${{ github.sha }}
        
    - name: Install Playwright browsers
      run: pnpm playwright install --with-deps
      
    - name: Run Playwright tests
      run: pnpm playwright
      env:
        VITE_API_BASE_URL: http://localhost:3001
        VITE_AI_PROVIDER: mock
        VITE_ENABLE_TELEMETRY: false
        
    - name: Upload Playwright report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 7
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: test-results/
        retention-days: 7

  # Smoke 测试
  smoke:
    name: Smoke Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: aura_flow_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Install backend dependencies
      run: |
        cd server
        pnpm install --frozen-lockfile
        
    - name: Setup test database
      run: |
        cd server
        pnpm db:generate
        pnpm db:push
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/aura_flow_test
        JWT_SECRET: test-secret-key
        NODE_ENV: test
        
    - name: Start backend server
      run: |
        cd server
        pnpm start &
        sleep 10
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/aura_flow_test
        JWT_SECRET: test-secret-key
        NODE_ENV: test
        PORT: 3001
        
    - name: Run smoke tests
      run: |
        chmod +x scripts/smoke.sh
        ./scripts/smoke.sh
      env:
        API_BASE_URL: http://localhost:3001

  # 性能测试
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: aura_flow_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Install backend dependencies
      run: |
        cd server
        pnpm install --frozen-lockfile
        
    - name: Setup test database
      run: |
        cd server
        pnpm db:generate
        pnpm db:push
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/aura_flow_test
        JWT_SECRET: test-secret-key
        NODE_ENV: test
        
    - name: Start backend server
      run: |
        cd server
        pnpm start &
        sleep 10
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/aura_flow_test
        JWT_SECRET: test-secret-key
        NODE_ENV: test
        PORT: 3001
        
    - name: Build frontend
      run: pnpm build
      env:
        VITE_API_BASE_URL: http://localhost:3001
        VITE_AI_PROVIDER: mock
        VITE_ENABLE_TELEMETRY: false
        VITE_BUILD_VERSION: ${{ github.sha }}
        
    - name: Install Playwright browsers
      run: pnpm playwright install --with-deps
      
    - name: Install k6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
        
    - name: Run k6 smoke tests
      run: |
        mkdir -p perf/results
        k6 run perf/k6/smoke.js --out json=perf/results/smoke-results.json --out html=perf/results/smoke-report.html
      env:
        BASE_URL: http://localhost:3001
        TEST_EMAIL: loadtest@example.com
        TEST_PASSWORD: loadtestpassword
        
    - name: Run k6 load tests
      run: |
        k6 run perf/k6/load.js --out json=perf/results/load-results.json --out html=perf/results/load-report.html
      env:
        BASE_URL: http://localhost:3001
        TEST_EMAIL: loadtest@example.com
        TEST_PASSWORD: loadtestpassword
        
    - name: Run k6 AI budget tests
      run: |
        k6 run perf/k6/ai-budget.js --out json=perf/results/ai-budget-results.json --out html=perf/results/ai-budget-report.html
      env:
        BASE_URL: http://localhost:3001
        TEST_EMAIL: budgettest@example.com
        TEST_PASSWORD: budgettestpassword
        
    - name: Upload performance reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-reports
        path: perf/results/
        retention-days: 7
