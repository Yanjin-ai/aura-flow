name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # 前端构建和测试
  frontend:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
        
    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
          
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Lint code
      run: pnpm lint
      
    - name: Run tests
      run: pnpm test
      
    - name: Build application
      run: pnpm build
      env:
        VITE_API_BASE_URL: http://localhost:3001
        VITE_AI_PROVIDER: mock
        VITE_ENABLE_TELEMETRY: false
        VITE_BUILD_VERSION: ${{ github.sha }}
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: dist/
        retention-days: 7

  # 后端构建和测试
  backend:
    name: Backend Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Install backend dependencies
      run: |
        cd server
        pnpm install --frozen-lockfile
        
    - name: Setup database
      run: |
        cd server
        pnpm db:generate
        pnpm db:push
        
    - name: Run backend tests
      run: |
        cd server
        pnpm test
      env:
        DATABASE_URL: file:./test.db
        JWT_SECRET: test-secret-key
        NODE_ENV: test
        
    - name: Build backend
      run: |
        cd server
        pnpm build

  # E2E 测试
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Download frontend build
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: dist/
        
    - name: Install Playwright browsers
      run: pnpm playwright install --with-deps
      
    - name: Run E2E tests
      run: pnpm playwright
      env:
        VITE_API_BASE_URL: http://localhost:3001
        VITE_AI_PROVIDER: mock
        VITE_ENABLE_TELEMETRY: false
        
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 7

  # 安全扫描
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # 部署到预览环境
  deploy-preview:
    name: Deploy to Preview
    runs-on: ubuntu-latest
    needs: [frontend, backend, e2e]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download frontend build
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: dist/
        
    - name: Deploy to preview environment
      run: |
        echo "部署到预览环境: PR #${{ github.event.number }}"
        # 这里可以添加实际的部署逻辑，比如部署到 Vercel、Netlify 等
        # 或者部署到自己的服务器

  # 部署到生产环境
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [frontend, backend, e2e, security]
    if: github.ref == 'refs/heads/main'
    
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download frontend build
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: dist/
        
    - name: Deploy to production
      run: |
        echo "部署到生产环境"
        # 这里添加生产环境部署逻辑
        # 例如：部署到 Cloudflare Pages、Vercel、或自托管服务器
        
    - name: Notify deployment success
      if: success()
      run: |
        echo "✅ 生产环境部署成功"
        # 可以添加通知逻辑，如发送 Slack 消息、邮件等
        
    - name: Notify deployment failure
      if: failure()
      run: |
        echo "❌ 生产环境部署失败"
        # 可以添加失败通知逻辑